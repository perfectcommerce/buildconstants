package main

import (
	"flag"
	"os"
	"os/exec"
	"path"
	"strings"
	"text/template"
)

const templ = `// Generated by running
//      buildversion
// DO NOT EDIT

package {{.GOPKG}}


const (
	MustRunBuildVersion = 0
	GOVERSION           = "{{.GOVERSION}}"
	GITVERSION          = "{{.GITVERSION}}"
	GITTAG              = "{{.GITTAG}}"
	BRANCH_NAME         = "{{.BRANCH_NAME}}"
	BUILD_NUMBER        = "{{.BUILD_NUMBER}}"
)
`

// Default name for output file
const (
	DEFAULTFILENAME = "buildversion_generated.go"
)

var env = os.Environ

func do(command cmd) (string, error) {
	expanded := os.Expand(command.Line, os.Getenv)
	var out string
	if command.echo {
		out = os.Getenv(command.V)
	} else {
		split := strings.Split(expanded, " ")
		cmd := exec.Command(split[0], split[1:]...)
		bout, err := cmd.Output()
		if err != nil {
			return "", err
		}
		out = string(bout)
	}

	val := strings.TrimSpace(out)
	err := os.Setenv(command.V, val)
	if err != nil {
		return "", err
	}
	return val, nil
}

func pkg() string {
	pkgCmd := exec.Command("go", "list", ".")
	out, err := pkgCmd.Output()
	if err != nil {
		return ""
	}
	_, packageName := path.Split(strings.TrimSpace(string(out)))
	return packageName
}

type cmd struct {
	V    string //variable
	Line string
	echo bool
}

func main() {

	fname := flag.String("o", DEFAULTFILENAME, "output file")
	packageName := flag.String("package", pkg(), "package the generated file will be in.")
	flag.Parse()

	incmds := []cmd{
		cmd{V: "GITVERSION", Line: "git rev-list --tags --max-count=1"},
		cmd{V: "GITTAG", Line: "git describe --always --tags ${GITVERSION}"},
		cmd{V: "GOVERSION", Line: "go version"},
		cmd{V: "BUILD_NUMBER", echo: true},
		cmd{V: "BRANCH_NAME", echo: true},
	}

	outcmds := make(map[string]string, len(incmds))
	outcmds["GOPKG"] = *packageName

	for _, cmd := range incmds {
		val, err := do(cmd)
		if err != nil {
			val = ""
			// os.Exit(1)
		}
		outcmds[cmd.V] = val
	}

	f, err := os.Create(*fname)
	if err != nil {
		os.Exit(1)
	}
	defer f.Close()

	t := template.Must(template.New("templ").Parse(templ))

	err = t.Execute(f, outcmds)

	if err != nil {
		os.Exit(1)
	}
}
